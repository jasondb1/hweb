Raspberry PI configurations

"Visual Studio Code is unable to watch for file changes in this large workspace" (error ENOSPC)#

When you see this notification, it indicates that the VS Code file watcher is running out of handles because the workspace is large and contains many files. The current limit can be viewed by running:

cat /proc/sys/fs/inotify/max_user_watches

The limit can be increased to its maximum by editing /etc/sysctl.conf and adding this line to the end of the file:

fs.inotify.max_user_watches=524288

The new value can then be loaded in by running sudo sysctl -p. Note that Arch Linux works a little differently, See Increasing the amount of inotify watchers for details.

While 524,288 is the maximum number of files that can be watched, if you're in an environment that is particularly memory constrained, you may wish to lower the number. Each file watch takes up 1080 bytes, so assuming that all 524,288 watches are consumed, that results in an upper bound of around 540 MiB.

enable i2c and spi in raspi-config on raspberry pi



-----
need to configure .env files in both the server root and client root folders

-----
enable permissions to use raspberry pi gpio - this must be run under the same user account as the server is run
sudo sh -c "echo 2 >/sys/class/gpio/export"

install node
curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
sudo apt -y install nodejs

install ssl certificate
# run the following in the terminal

openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days XXX

req - utility used to request the certificate.
    -x509 - tells the computer we want a self signed certificate and not to actually request one from a certificate authority.
        -newkey - takes a paramater rsa:n-bits. It will generate a new key and certificate with RSA encryption of n-bits that are passed in. Here we are passing in the request for RSA of 2048 bits.
            -keyout key.pem - puts out a key file that is the same name as the argument being passed to -keyout. In this case, we are generating a key file named key.pem.
                -out cert.pem - puts out a file (in this case a certificate) with the name being passed to -out. Here we are certificate cert.pem.
                    -days XXX - how many days the certificate should be for. Defaults to 30 days.


fill out questions:

specify localhost for Common Name
for Common Name (server FQDN or YOUR name) []: localhost
passphrase: <whatever you want> - needs to be placed into .env


After 

npm update - updates npm packages



server
npm start
node server.js


client
192.168.1.20:3000
localhost:3000


admin 
Passw0rd


--install latest node
npm install
npm rebuild

ssh pi@homeweb.local


***** Starting server automatically

place homeweb.service file into /lib/systemd/system/homeweb.service

once this is done ensure this is running: sudo systemctl daemon-reload

turn on: sudo systemctl enable homeweb.service
sudo systemctl stop homeweb.service
sudo systemctl start homeweb.service
sudo systemctl disable homeweb.service - disable service on boot

troubleshoot
journalctl -u homewbe.service

log to a file :ExecStart=/bin/bash -c '/usr/bin/node /home/pi/homeweb > /home/pi/homeweb.log 2>&1'




https://nodesource.com/blog/running-your-node-js-app-with-systemd-part-1/

move 

Using systemctl To Control Our App

The hard part is done! We will now learn how to use the system provided tools to control our app. To being with, enter the command

$ sudo systemctl daemon-reload

You have to do this whenever any of the service files change at all so that systemd picks up the new info.

Next, let's launch our app with

$ sudo systemctl start hello_env

After you do this, you should be able to go to

http://192.168.1.20:3001

in your web browser and see the output. If it's there, congratulations, you've launched your app using systemd! If the output looks very different than it did when you launched the app manually don't worry, that's normal. When systemd kicks off an application, it does so from a much more minimal environment than the one you have when you ssh into a machine. In particular, the $HOME environment variable may not be set by default, so be sure to pay attention to this if your app makes use of any environment variables. You may need to set them yourself when using systemd.

You may be interested in what state systemd thinks the app is in, and if so, you can find out with

$ sudo systemctl status hello_env

Now, if you want to stop your app, the command is simply

$ sudo systemctl stop hello_env

and unsurprisingly, the following will restart things for us

$ sudo systemctl restart hello_env

If you want to make the application start up when the machine boots, you accomplish that by enabling it

$ sudo systemtl enable hello_env

and finally, if you previously enabled the app, but you change your mind and want to stop it from coming up when the machine starts, you correspondingly disable it

$ sudo systemctl disable hello_env



Implementing Authentication :
https://bezkoder.com/node-js-jwt-authentication-mysql/